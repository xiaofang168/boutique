apply plugin: 'scala' 
apply plugin: 'eclipse' 
buildDir = "target"
version = '1.0'

sourceSets {
   main {
        scala {
            srcDirs = ['src/main/scala']
        }
        resources {
            srcDirs = ['src/main/resources','src/main/conf/development']
        }
    }
}

task createScalaProject << { 
	sourceSets*.scala.srcDirs*.each { it.mkdirs() } 
	sourceSets*.resources.srcDirs*.each { it.mkdirs()} 
}

repositories {
	maven {
			url "http://localhost:8081/nexus/content/groups/public/"
			url "http://mirrors.ibiblio.org/maven2/"
	}
	//mavenCentral()
}

dependencies {
	compile (
		'org.scala-lang:scala-library:2.10.2',
		'org.apache.tapestry:tapestry-core:5.3.7',
		'org.apache.tapestry:tapestry-hibernate:5.3.7',
		'org.hibernate.javax.persistence:hibernate-jpa-2.0-api:1.0.1.Final',
		'javax.validation:validation-api:1.1.0.Final',
		'org.hibernate:hibernate-validator:5.0.1.Final',
		'net.sourceforge.tapestrytestify:tapestry-testify:1.0.4',
		'com.h2database:h2:1.3.171',
		'log4j:log4j:1.2.12',
		'org.slf4j:slf4j-api:1.5.8',
		'commons-collections:commons-collections:3.2'
	)
	testCompile group: 'junit', name: 'junit', version: '4.+'
}

// changing the output directories of the generated classpathentries
import org.gradle.plugins.ide.eclipse.model.SourceFolder 
eclipse.classpath.file {
    beforeMerged { classpath -> 
        classpath.entries.clear()
    }
    whenMerged {  cp -> 
        cp.entries.findAll { it instanceof SourceFolder && it.path.startsWith("src/main/") }*.output = "target/classes" 
        cp.entries.findAll { it instanceof SourceFolder && it.path.startsWith("src/test/") }*.output = "target/test-classes" 
        //cp.entries.removeAll { it.kind == "output" }
    }
}


